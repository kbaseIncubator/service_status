{"version":3,"sources":["api/restClient.js","api/jsonRpcClient.js","api/dynamicClient.js","api/statusClient.js","components/Icon.jsx","components/Response.jsx","components/Status.jsx","components/EnvironmentPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["RestClient","url","this","func","request","method","cache","headers","redirect","referrer","maxRedirects","fetch","response","console","warn","ok","Error","JSONRPCClient","mod","data","body","JSON","stringify","id","uuid","version","params","log","DynamicClient","serviceWizardUrl","getServiceUrl","result","module_name","json","StatusClient","options","client","type","module","makeCall","clone","text","StatusIcon","props","state","status","icon","className","pulse","nextProps","prevState","React","Component","ServiceResponse","view","error","updateResponse","Status","useState","setStatus","setResponse","responseView","setResponseView","statusClient","handleStatusChange","newStatus","useEffect","ignore","a","getStatus","attemptedCall","message","stack","lookupStatus","onClick","name","EnvironmentPicker","envIdx","setEnv","envs","envOrder","map","env","idx","classes","key","updater","updateEnv","App","config","environments","env_order","services","Object","keys","sort","baseUrl","prefix","statuses","service","serviceConfig","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53e51dda.chunk.js","sourcesContent":["export default class RestClient {\n    constructor(url) {\n        this.url = url;\n    }\n\n    async makeCall(func) {\n        const request = {\n            method: 'GET',\n            cache: 'no-cache',\n            headers: {\n                'Content-type': 'application/json; charset=utf8'\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            maxRedirects: 5\n        };\n        const response = await fetch(this.url + func, request);\n        console.warn(response);\n        if (!response.ok) {\n            throw new Error('Error while contacting service');\n        }\n        return response;\n    }\n}\n","import uuid from 'uuid/v4';\n\nexport default class JSONRPCClient {\n    constructor(url, mod) {\n        this.url = url;\n        this.mod = mod;\n    }\n\n    /**\n     * Returns a Promise with the fetch call being made.\n     * JSON-RPC calls are POSTed with the following info:\n     * { version: \"1.1\", method: \"Module.method\", params: [data] }\n     * @param {string} func - the function to invoke\n     * @param {object} data (optional) - data to pass to the function\n     */\n    async makeCall(func, data) {\n        const request = {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: {\n                // 'Content-type': 'application/json; charset=utf-8',\n                'Accept': 'application/json'\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            maxRedirects: 5,\n            body: JSON.stringify({\n                id: uuid(),\n                version: '1.1',\n                method: `${this.mod}.${func}`,\n                params: data ? [data] : []\n            })\n        };\n        const response = await fetch(this.url, request);\n        if (!response.ok) {\n            console.log(response);\n            throw new Error('Bad response from service');\n        }\n        return response;\n    }\n}\n","import uuid from 'uuid/v4';\nimport JSONRPCClient from \"./jsonRpcClient\";\n\nexport default class DynamicClient extends JSONRPCClient {\n    constructor(url, mod) {\n        super(url, mod);\n        this.serviceWizardUrl = url;\n    }\n\n    async makeCall(func, data) {\n        const response = await this.getServiceUrl();\n        this.url = response.result[0].url;\n        return super.makeCall(func, data);\n    }\n\n    async getServiceUrl() {\n        const request = {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            maxRedirects: 5,\n            body: JSON.stringify({\n                id: uuid(),\n                version: '1.1',\n                method: 'ServiceWizard.get_service_status',\n                params: [{\n                    module_name: this.mod,\n                    version: null\n                }]\n            })\n        };\n        const response = await fetch(this.serviceWizardUrl, request);\n        if (!response.ok) {\n            throw new Error('Error while looking up dynamic service URL');\n        }\n        return await response.json();\n    }\n}\n","import RestClient from './restClient';\nimport JSONRPCClient from './jsonRpcClient';\nimport DynamicClient from './dynamicClient';\n\nexport default class StatusClient {\n    constructor(options) {\n        this.options = options;\n        this.client = null;\n        switch(options.type) {\n            case \"rest\":\n                this.client = new RestClient(options.url);\n                break;\n            case \"jsonrpc\":\n                this.client = new JSONRPCClient(options.url, options.module);\n                break;\n            case \"dynamic\":\n                this.client = new DynamicClient(options.url, options.module);\n                break;\n            default:\n                break;\n        }\n    }\n\n    async getStatus(func, data) {\n        console.log(\"calling out to \" + this.options.url);\n        const response = await this.client.makeCall(func, data);\n        try {\n            return await response.clone().json();\n        }\n        catch (error) {\n            return await response.text();\n        }\n    }\n}\n","import React from 'react';\nimport '@fortawesome/fontawesome-free/js/all';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../css/status.css';\n\nexport default class StatusIcon extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            status: 'starting'\n        }\n    }\n\n    render() {\n        switch(this.state.status) {\n            case 'ok':\n                return <FontAwesomeIcon icon=\"thumbs-up\" className=\"status-icon icon-ok\"/>\n            case 'error':\n                return <FontAwesomeIcon icon=\"bomb\" className=\"status-icon icon-error\"/>\n            default:\n                return <FontAwesomeIcon icon=\"spinner\" pulse className=\"status-icon icon-loading\"/>\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.status !== prevState.status) {\n            return { status: nextProps.status };\n        }\n        return null;\n    }\n\n}\n","import React from 'react';\nimport '../css/response.css';\n\nexport default class ServiceResponse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: false\n        };\n    }\n\n    updateResponse(response) {\n        try {\n            response = JSON.stringify(response, null, 2);\n        }\n        catch (error) {\n            // pass\n        }\n        return response;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.view !== prevState.view) {\n            return { view: nextProps.view };\n        }\n        return null;\n    }\n\n    render() {\n        if (!this.state.view) {\n            return <div></div>\n        }\n        const response = this.updateResponse(this.props.response);\n        return (\n            <>\n              <p className=\"response-url\"> {this.props.url} </p>\n              <pre className=\"response-area\">{response}</pre>\n            </>\n        );\n    }\n}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState, useEffect} from 'react';\nimport StatusClient from '../api/statusClient';\nimport StatusIcon from './Icon';\nimport '../css/status.css';\nimport ServiceResponse from './Response';\n\nexport default function Status(props) {\n    /**\n     * Makes a new Status component, sets the initial status as 'starting'\n     * @param {object} props\n     * props are mostly as defined in config.json, but here's an expected list:\n     * url - string - the url to contact\n     * key - string - the service (something unique)\n     * name - the name of the service (display string)\n     * path - the path to the service endpoint (service_wizard if it's a dynamic service)\n     * type - one of jsonrpc, dynamic, rest\n     * module - the registered module name (for making calls with)\n     * method - the unauthenticated method to invoke to see if the service is up.\n     */\n    const [status, setStatus] = useState('updating');\n    const [response, setResponse] = useState(null);\n    const [responseView, setResponseView] = useState(false);\n    const statusClient = new StatusClient(props);\n\n    function handleStatusChange(result, newStatus) {\n        setResponse(result);\n        setStatus(newStatus);\n    }\n\n    useEffect(() => {\n        let ignore = false;\n\n        async function lookupStatus () {\n            handleStatusChange('', 'updating');\n            try {\n                const result = await statusClient.getStatus(props.method);\n                // console.log(\"Got good response for \" + props.name, result);\n                if (!ignore) {\n                    handleStatusChange(result, 'ok');\n                }\n            }\n            catch(error) {\n                let result = {\n                    attemptedCall: props.method,\n                    url: props.url\n                };\n                if (error.message) {\n                    result.message = error.message;\n                }\n                if (error.stack) {\n                    result.stack = error.stack;\n                }\n                if (!ignore) {\n                    handleStatusChange(result, 'error');\n                }\n                console.error(error);\n            }\n        };\n        lookupStatus();\n        return () => { ignore = true; }\n    }, [props.url]);\n\n    function toggleResponseView() {\n        setResponseView(!responseView);\n    }\n\n    return (\n        <div className={`kb-service-status ${status}`}>\n            <div className=\"status-flex\" onClick={toggleResponseView}>\n                <div>{props.name}</div>\n                <a className=\"status-button\">\n                    <StatusIcon status={status}/>\n                </a>\n            </div>\n            <ServiceResponse view={responseView} response={response} url={props.url} />\n        </div>\n    );\n}\n","import React, {useState} from 'react';\nimport '../css/Environments.css';\n\nexport default function EnvironmentPicker(props) {\n    const [envIdx, setEnv] = useState(0);\n    const updateEnv = (idx) => {\n        setEnv(idx);\n        props.updater(props.envOrder[idx]);\n    }\n\n    let envs = props.envOrder.map((env, idx) => {\n        let classes = idx === envIdx ? \"selected\": \"\";\n        return <span className={classes} key={idx} onClick={() => updateEnv(idx)}>{props.envs[env].name}</span>\n    });\n    return (\n        <div className=\"env-list\">{envs}</div>\n    )\n}\n","import React, {useState} from 'react';\nimport './css/App.css';\nimport config from './config.json';\nimport Status from './components/Status';\nimport EnvironmentPicker from './components/EnvironmentPicker';\n\nfunction App() {\n    const updateEnv = (env) => {\n        setEnv(env);\n    }\n\n    const [env, setEnv] = useState('prod');\n    const envs = config.environments;\n    const envOrder = config.env_order;\n    let services = Object.keys(config.services).sort();\n    const prefix = envs[env].prefix ? envs[env].prefix + '.' : '';\n    let baseUrl = 'https://' + prefix + 'kbase.us/services/';\n\n    let statuses = services.map(service => {\n        let serviceConfig = config.services[service];\n        serviceConfig.key = service;\n        serviceConfig.url = baseUrl + serviceConfig.path;\n        return <Status { ...serviceConfig } />;\n    });\n\n    console.log(statuses);\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <EnvironmentPicker\n                    envs={envs}\n                    envOrder={envOrder}\n                    updater={updateEnv}\n                />\n            </header>\n            <div className=\"status-area\">\n                {statuses}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}